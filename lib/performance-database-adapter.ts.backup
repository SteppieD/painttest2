/**
 * Performance Database Adapter
 * 
 * Comprehensive solution for fixing N+1 queries and performance issues
 * Implements optimized queries, caching, and batch operations
 */

import Database from 'better-sqlite3';
import path from 'path';

interface QueryCache {
  [key: string]: {
    data: any;
    timestamp: number;
    ttl: number;
  };
}

interface DatabaseMetrics {
  queryCount: number;
  totalExecutionTime: number;
  slowQueries: Array<{
    query: string;
    duration: number;
    timestamp: number;
  }>;
}

export class PerformanceDatabaseAdapter {
  private db: Database.Database | null = null;
  private cache: QueryCache = {};
  private metrics: DatabaseMetrics = {
    queryCount: 0,
    totalExecutionTime: 0,
    slowQueries: []
  };
  private readonly SLOW_QUERY_THRESHOLD = 100; // ms
  private readonly DEFAULT_CACHE_TTL = 30000; // 30 seconds

  constructor() {
    this.initializeDatabase();
  }

  private initializeDatabase() {
    try {
      const dbPath = path.join(process.cwd(), 'painting_quotes_app.db');
      this.db = new Database(dbPath);
      
      // Enable WAL mode for better performance
      this.db.pragma('journal_mode = WAL');
      this.db.pragma('synchronous = NORMAL');
      this.db.pragma('cache_size = 1000');
      this.db.pragma('temp_store = memory');
      
      console.log('✅ Performance database adapter initialized');
    } catch (error) {
      console.error('❌ Failed to initialize performance database:', error);
    }
  }

  /**
   * Execute query with performance monitoring and caching
   */
  private executeQuery<T = any>(
    sql: string, 
    params: any[] = [], 
    type: 'get' | 'all' | 'run' = 'all',
    cacheable = false,
    cacheKey?: string
  ): T {
    if (!this.db) {
      throw new Error('Database not initialized');
    }

    // Check cache first
    if (cacheable && cacheKey) {
      const cached = this.getFromCache(cacheKey);
      if (cached) {
        return cached as T;
      }
    }

    const startTime = performance.now();
    let result: any;

    try {
      const stmt = this.db.prepare(sql);
      
      switch (type) {
        case 'get':
          result = stmt.get(...params);
          break;
        case 'all':
          result = stmt.all(...params);
          break;
        case 'run':
          result = stmt.run(...params);
          break;
      }

      const duration = performance.now() - startTime;
      this.recordMetrics(sql, duration);

      // Cache the result if cacheable
      if (cacheable && cacheKey && result) {
        this.setCache(cacheKey, result);
      }

      return result as T;

    } catch (error) {
      console.error('Database query error:', { sql, params, error });
      throw error;
    }
  }

  /**
   * Cache management
   */
  private getFromCache(key: string): any | null {
    const item = this.cache[key];
    if (!item) return null;

    if (Date.now() - item.timestamp > item.ttl) {
      delete this.cache[key];
      return null;
    }

    return item.data;
  }

  private setCache(key: string, data: any, ttl = this.DEFAULT_CACHE_TTL): void {
    this.cache[key] = {
      data,
      timestamp: Date.now(),
      ttl
    };
  }

  private recordMetrics(sql: string, duration: number): void {
    this.metrics.queryCount++;
    this.metrics.totalExecutionTime += duration;

    if (duration > this.SLOW_QUERY_THRESHOLD) {
      this.metrics.slowQueries.push({
        query: sql.substring(0, 100) + '...',
        duration,
        timestamp: Date.now()
      });

      // Keep only last 50 slow queries
      if (this.metrics.slowQueries.length > 50) {
        this.metrics.slowQueries = this.metrics.slowQueries.slice(-50);
      }
    }
  }

  /**
   * OPTIMIZED DASHBOARD QUERIES
   * Eliminates N+1 queries with efficient JOINs and aggregations
   */
  getDashboardData(companyId: number) {
    const cacheKey = `dashboard_${companyId}`;
    
    return this.executeQuery(`
      WITH company_stats AS (
        SELECT 
          c.id,
          c.company_name,
          c.access_code,
          c.email,
          c.phone,
          c.default_walls_rate,
          c.default_ceilings_rate,
          c.default_trim_rate,
          c.tax_rate,
          c.quote_limit,
          c.is_trial
        FROM companies c
        WHERE c.id = ?
      ),
      quote_metrics AS (
        SELECT 
          COUNT(*) as total_quotes,
          COUNT(CASE WHEN status IN ('approved', 'accepted') THEN 1 END) as approved_quotes,
          COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_quotes,
          COALESCE(SUM(CASE WHEN status IN ('approved', 'accepted') THEN 
            COALESCE(final_price, total_revenue, quote_amount) ELSE 0 END), 0) as total_revenue,
          COALESCE(AVG(CASE WHEN status IN ('approved', 'accepted') THEN 
            COALESCE(final_price, total_revenue, quote_amount) END), 0) as avg_quote_value,
          COUNT(CASE WHEN created_at >= date('now', 'start of month') THEN 1 END) as this_month_quotes,
          COALESCE(SUM(CASE WHEN created_at >= date('now', 'start of month') AND status IN ('approved', 'accepted') THEN 
            COALESCE(final_price, total_revenue, quote_amount) ELSE 0 END), 0) as this_month_revenue
        FROM quotes 
        WHERE company_id = ?
      ),
      customer_metrics AS (
        SELECT 
          COUNT(DISTINCT id) as total_customers,
          COUNT(DISTINCT CASE WHEN status = 'active' THEN id END) as active_customers
        FROM customers 
        WHERE company_id = ?
      )
      SELECT 
        cs.*,
        COALESCE(qm.total_quotes, 0) as total_quotes,
        COALESCE(qm.approved_quotes, 0) as approved_quotes,
        COALESCE(qm.pending_quotes, 0) as pending_quotes,
        COALESCE(qm.total_revenue, 0) as total_revenue,
        COALESCE(qm.avg_quote_value, 0) as avg_quote_value,
        COALESCE(qm.this_month_quotes, 0) as this_month_quotes,
        COALESCE(qm.this_month_revenue, 0) as this_month_revenue,
        COALESCE(cm.total_customers, 0) as total_customers,
        COALESCE(cm.active_customers, 0) as active_customers,
        CASE 
          WHEN COALESCE(qm.total_quotes, 0) = 0 THEN 0
          ELSE ROUND((COALESCE(qm.approved_quotes, 0) * 100.0 / qm.total_quotes), 2)
        END as conversion_rate
      FROM company_stats cs
      LEFT JOIN quote_metrics qm ON 1=1
      LEFT JOIN customer_metrics cm ON 1=1
    `, [companyId, companyId, companyId], 'get', true, cacheKey);
  }

  /**
   * OPTIMIZED QUOTES LIST
   * Single query with all needed data instead of N+1 pattern
   */
  getQuotesWithDetails(companyId: number, filters: {
    limit?: number;
    offset?: number;
    status?: string;
    search?: string;
  } = {}) {
    const { limit = 50, offset = 0, status, search } = filters;
    
    let whereClause = 'WHERE q.company_id = ?';
    const params: (string | number)[] = [companyId];

    if (status && status !== 'all') {
      whereClause += ' AND q.status = ?';
      params.push(status);
    }

    if (search) {
      whereClause += ' AND (q.customer_name LIKE ? OR q.address LIKE ? OR q.quote_id LIKE ?)';
      const searchPattern = `%${search}%`;
      params.push(searchPattern, searchPattern, searchPattern);
    }

    // Main query with all joins to avoid N+1
    const quotes = this.executeQuery(`
      SELECT 
        q.*,
        c.company_name,
        cust.name as linked_customer_name,
        cust.email as linked_customer_email,
        cust.phone as linked_customer_phone,
        
        -- Calculate breakdown from stored values
        CASE 
          WHEN q.total_materials > 0 THEN q.total_materials
          ELSE ROUND(COALESCE(q.final_price, q.total_revenue, q.quote_amount, 0) * 0.35, 2)
        END as materials_cost,
        
        CASE 
          WHEN q.projected_labor > 0 THEN q.projected_labor
          ELSE ROUND(COALESCE(q.final_price, q.total_revenue, q.quote_amount, 0) * 0.45, 2)
        END as labor_cost,
        
        ROUND(COALESCE(q.final_price, q.total_revenue, q.quote_amount, 0) * 0.05, 2) as prep_work_cost,
        
        CASE 
          WHEN q.markup_percentage > 0 THEN 
            ROUND((COALESCE(q.final_price, q.total_revenue, q.quote_amount, 0) * q.markup_percentage / 100), 2)
          ELSE 
            ROUND(COALESCE(q.final_price, q.total_revenue, q.quote_amount, 0) * 0.15, 2)
        END as markup_amount
        
      FROM quotes q
      LEFT JOIN companies c ON q.company_id = c.id
      LEFT JOIN customers cust ON q.customer_id = cust.id
      ${whereClause}
      ORDER BY q.created_at DESC
      LIMIT ? OFFSET ?
    `, [...params, limit, offset], 'all');

    // Get total count for pagination
    const totalResult = this.executeQuery(`
      SELECT COUNT(*) as total
      FROM quotes q
      ${whereClause}
    `, params.slice(0, -2), 'get'); // Remove limit/offset params

    return {
      quotes,
      total: totalResult.total,
      page: Math.floor(offset / limit) + 1,
      pages: Math.ceil(totalResult.total / limit)
    };
  }

  /**
   * OPTIMIZED CUSTOMERS LIST
   * Eliminates N+1 queries with aggregated customer data
   */
  getCustomersWithMetrics(companyId: number, options: {
    limit?: number;
    offset?: number;
    search?: string;
  } = {}) {
    const { limit = 50, offset = 0, search } = options;
    
    let whereClause = 'WHERE c.company_id = ?';
    const params: (string | number)[] = [companyId];

    if (search) {
      whereClause += ' AND (c.name LIKE ? OR c.email LIKE ? OR c.phone LIKE ?)';
      const searchPattern = `%${search}%`;
      params.push(searchPattern, searchPattern, searchPattern);
    }

    return this.executeQuery(`
      SELECT 
        c.*,
        comp.company_name,
        comp.access_code as company_access_code,
        
        -- Quote statistics
        COUNT(q.id) as quote_count,
        COUNT(CASE WHEN q.status IN ('approved', 'accepted') THEN 1 END) as approved_quotes,
        COUNT(CASE WHEN q.status = 'pending' THEN 1 END) as pending_quotes,
        
        -- Revenue calculations
        COALESCE(SUM(CASE WHEN q.status IN ('approved', 'accepted') THEN 
          COALESCE(q.final_price, q.total_revenue, q.quote_amount) ELSE 0 END), 0) as total_revenue,
        
        COALESCE(AVG(CASE WHEN q.status IN ('approved', 'accepted') THEN 
          COALESCE(q.final_price, q.total_revenue, q.quote_amount) END), 0) as avg_quote_value,
          
        -- Activity tracking
        MAX(q.created_at) as last_activity,
        MIN(q.created_at) as first_activity,
        
        -- Conversion rate
        CASE 
          WHEN COUNT(q.id) = 0 THEN 0
          ELSE ROUND((COUNT(CASE WHEN q.status IN ('approved', 'accepted') THEN 1 END) * 100.0 / COUNT(q.id)), 2)
        END as conversion_rate
        
      FROM customers c
      JOIN companies comp ON c.company_id = comp.id
      LEFT JOIN quotes q ON c.id = q.customer_id
      ${whereClause}
      GROUP BY c.id
      ORDER BY c.created_at DESC
      LIMIT ? OFFSET ?
    `, [...params, limit, offset], 'all');
  }

  /**
   * BATCH OPERATIONS
   * Process multiple operations efficiently
   */
  batchCreateQuotes(quotes: Array<{
    company_id: number;
    quote_id: string;
    customer_name: string;
    [key: string]: any;
  }>) {
    if (!this.db) throw new Error('Database not initialized');

    const insertStmt = this.db.prepare(`
      INSERT INTO quotes (
        company_id, quote_id, customer_name, customer_email, customer_phone,
        address, project_type, walls_sqft, ceilings_sqft, trim_sqft,
        final_price, total_revenue, status, created_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    const transaction = this.db.transaction((quotesToInsert: any[]) => {
      for (const quote of quotesToInsert) {
        insertStmt.run(
          quote.company_id,
          quote.quote_id,
          quote.customer_name,
          quote.customer_email || null,
          quote.customer_phone || null,
          quote.address || null,
          quote.project_type || 'interior',
          quote.walls_sqft || 0,
          quote.ceilings_sqft || 0,
          quote.trim_sqft || 0,
          quote.final_price || 0,
          quote.total_revenue || quote.final_price || 0,
          quote.status || 'pending',
          quote.created_at || new Date().toISOString()
        );
      }
    });

    return transaction(quotes);
  }

  /**
   * BATCH UPDATE OPERATIONS
   * Update multiple records efficiently
   */
  batchUpdateQuoteStatuses(updates: Array<{ id: number; status: string }>) {
    if (!this.db) throw new Error('Database not initialized');

    const updateStmt = this.db.prepare(`
      UPDATE quotes 
      SET status = ?, updated_at = CURRENT_TIMESTAMP 
      WHERE id = ?
    `);

    const transaction = this.db.transaction((updateList: any[]) => {
      for (const update of updateList) {
        updateStmt.run(update.status, update.id);
      }
    });

    return transaction(updates);
  }

  /**
   * ANALYTICS QUERIES
   * Optimized for reporting and insights
   */
  getCompanyAnalytics(companyId: number, dateRange?: {
    startDate: string;
    endDate: string;
  }) {
    let dateFilter = '';
    const params: (string | number)[] = [companyId];

    if (dateRange) {
      dateFilter = 'AND q.created_at BETWEEN ? AND ?';
      params.push(dateRange.startDate, dateRange.endDate);
    }

    return this.executeQuery(`
      WITH date_series AS (
        SELECT date('now', '-30 days') as date
        UNION ALL
        SELECT date(date, '+1 day') FROM date_series WHERE date < date('now')
      ),
      daily_stats AS (
        SELECT 
          date(q.created_at) as quote_date,
          COUNT(*) as quotes_created,
          COUNT(CASE WHEN q.status IN ('approved', 'accepted') THEN 1 END) as quotes_approved,
          COALESCE(SUM(CASE WHEN q.status IN ('approved', 'accepted') THEN 
            COALESCE(q.final_price, q.total_revenue, q.quote_amount) ELSE 0 END), 0) as daily_revenue
        FROM quotes q
        WHERE q.company_id = ? ${dateFilter}
        GROUP BY date(q.created_at)
      ),
      project_type_stats AS (
        SELECT 
          COALESCE(q.project_type, 'interior') as project_type,
          COUNT(*) as count,
          COALESCE(AVG(COALESCE(q.final_price, q.total_revenue, q.quote_amount)), 0) as avg_value
        FROM quotes q
        WHERE q.company_id = ? ${dateFilter}
        GROUP BY COALESCE(q.project_type, 'interior')
      ),
      status_distribution AS (
        SELECT 
          COALESCE(q.status, 'pending') as status,
          COUNT(*) as count,
          COUNT(*) * 100.0 / (SELECT COUNT(*) FROM quotes WHERE company_id = ? ${dateFilter}) as percentage
        FROM quotes q
        WHERE q.company_id = ? ${dateFilter}
        GROUP BY COALESCE(q.status, 'pending')
      )
      SELECT 
        'daily_trends' as metric_type,
        json_group_array(
          json_object(
            'date', ds.date,
            'quotes_created', COALESCE(dst.quotes_created, 0),
            'quotes_approved', COALESCE(dst.quotes_approved, 0),
            'daily_revenue', COALESCE(dst.daily_revenue, 0)
          )
        ) as data
      FROM date_series ds
      LEFT JOIN daily_stats dst ON ds.date = dst.quote_date
      
      UNION ALL
      
      SELECT 
        'project_types' as metric_type,
        json_group_array(
          json_object(
            'type', project_type,
            'count', count,
            'avg_value', avg_value
          )
        ) as data
      FROM project_type_stats
      
      UNION ALL
      
      SELECT 
        'status_distribution' as metric_type,
        json_group_array(
          json_object(
            'status', status,
            'count', count,
            'percentage', percentage
          )
        ) as data
      FROM status_distribution
    `, [companyId, ...params, companyId, ...params, companyId, ...params, companyId, ...params], 'all');
  }

  /**
   * SEARCH OPTIMIZATION
   * Full-text search with efficient indexing
   */
  performOptimizedSearch(query: string, companyId?: number, options: {
    limit?: number;
    includeCustomers?: boolean;
    includeQuotes?: boolean;
  } = {}) {
    const { limit = 20, includeCustomers = true, includeQuotes = true } = options;
    const searchPattern = `%${query}%`;
    
    let companyFilter = '';
    let params: (string | number)[] = [searchPattern, searchPattern, searchPattern];
    
    if (companyId) {
      companyFilter = 'AND company_id = ?';
      params.push(companyId);
    }

    const results: any = { customers: [], quotes: [] };

    if (includeCustomers) {
      results.customers = this.executeQuery(`
        SELECT 
          c.*,
          COUNT(q.id) as quote_count,
          COALESCE(SUM(CASE WHEN q.status IN ('approved', 'accepted') THEN 
            COALESCE(q.final_price, q.total_revenue) ELSE 0 END), 0) as total_revenue
        FROM customers c
        LEFT JOIN quotes q ON c.id = q.customer_id
        WHERE (c.name LIKE ? OR c.email LIKE ? OR c.phone LIKE ?)
        ${companyFilter}
        GROUP BY c.id
        ORDER BY c.name
        LIMIT ?
      `, [...params, limit], 'all');
    }

    if (includeQuotes) {
      results.quotes = this.executeQuery(`
        SELECT 
          q.*,
          c.name as customer_name
        FROM quotes q
        LEFT JOIN customers c ON q.customer_id = c.id
        WHERE (q.customer_name LIKE ? OR q.address LIKE ? OR q.quote_id LIKE ?)
        ${companyFilter}
        ORDER BY q.created_at DESC
        LIMIT ?
      `, [...params, limit], 'all');
    }

    return results;
  }

  /**
   * CACHE MANAGEMENT
   */
  clearCache(pattern?: string) {
    if (pattern) {
      const keys = Object.keys(this.cache);
      for (const key of keys) {
        if (key.includes(pattern)) {
          delete this.cache[key];
        }
      }
    } else {
      this.cache = {};
    }
  }

  /**
   * PERFORMANCE METRICS
   */
  getPerformanceMetrics() {
    const avgQueryTime = this.metrics.queryCount > 0 ? 
      this.metrics.totalExecutionTime / this.metrics.queryCount : 0;

    return {
      ...this.metrics,
      avgQueryTime: Math.round(avgQueryTime * 100) / 100,
      cacheSize: Object.keys(this.cache).length,
      recentSlowQueries: this.metrics.slowQueries.slice(-10)
    };
  }

  /**
   * DATABASE MAINTENANCE
   */
  optimize() {
    if (!this.db) return;

    try {
      // Analyze query planner statistics
      this.db.pragma('optimize');
      
      // Update table statistics
      this.db.exec('ANALYZE');
      
      // Clear old cache entries
      const now = Date.now();
      Object.keys(this.cache).forEach(key => {
        const item = this.cache[key];
        if (now - item.timestamp > item.ttl) {
          delete this.cache[key];
        }
      });

      console.log('✅ Database optimization completed');
    } catch (error) {
      console.error('❌ Database optimization failed:', error);
    }
  }

  /**
   * Close database connection
   */
  close() {
    if (this.db) {
      this.db.close();
      this.db = null;
    }
  }
}

// Export singleton instance
export const performanceDb = new PerformanceDatabaseAdapter();

// Export individual query functions for compatibility
export const getOptimizedDashboard = (companyId: number) => 
  performanceDb.getDashboardData(companyId);

export const getOptimizedQuotes = (companyId: number, filters: any = {}) => 
  performanceDb.getQuotesWithDetails(companyId, filters);

export const getOptimizedCustomers = (companyId: number, options: any = {}) => 
  performanceDb.getCustomersWithMetrics(companyId, options);

export const batchCreateQuotes = (quotes: any[]) => 
  performanceDb.batchCreateQuotes(quotes);

export const getCompanyAnalytics = (companyId: number, dateRange?: any) => 
  performanceDb.getCompanyAnalytics(companyId, dateRange);

export const optimizedSearch = (query: string, companyId?: number, options?: any) => 
  performanceDb.performOptimizedSearch(query, companyId, options);

export const clearDatabaseCache = (pattern?: string) => 
  performanceDb.clearCache(pattern);

export const getDatabaseMetrics = () => 
  performanceDb.getPerformanceMetrics();